decTobin n = "", if n<=0
           = decTobin (n/2) ++ "0", if (n/2)*2 = n
           = decTobin (n/2) ++ "1", if (n/2)*2 < n

binTodecCalc [] n = 0
binTodecCalc (x:xs) n = 2^n + binTodecCalc xs (n+1), if x='1'
                      = binTodecCalc xs (n+1), if x='0'

binTodec xs = binTodecCalc (reverse xs) 0

remove x [] = []
remove x (y:ys) = remove x ys, if x=y
                = [y] ++ remove x ys, otherwise

removeOnce x [] = []
removeOnce x (y:ys) = ys, if x=y
                    = [y] ++ removeOnce x ys, otherwise

subset [] ys = True
subset (x:xs) ys = member ys (x) /\ subset xs ys

last [] = 0
last (x:xs) = x, if (#xs)=0
            = last xs, otherwise

langstebeginplateau (x:xs) = [x] ++ langstebeginplateau xs, if x=(hd xs)
                           = [x], otherwise

insert n [] = [n]
insert n (x:xs) = [n] ++ [x] ++ xs, if n<x
                = [x] ++ (insert n xs), otherwise

isort [] = []
isort (x:xs) = insert x (isort xs)

merge [] ys = ys
merge (x:xs) (y:ys) = [x,y] ++ merge xs ys, if x<y
                    = [y,x] ++ merge xs ys, otherwise

msort [] = []
msort [x] = [x]
msort xs = merge es ta
where es = msort (take m xs)
      ta = msort (drop m xs)
       m = (#xs)/2